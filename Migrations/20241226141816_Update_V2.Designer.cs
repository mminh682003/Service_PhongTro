// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Service_PhongTro.Models;

#nullable disable

namespace Service_PhongTro.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241226141816_Update_V2")]
    partial class Update_V2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Service_PhongTro.Models.DayTro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("soLuongPhong")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("tenDayTro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("dayTro");
                });

            modelBuilder.Entity("Service_PhongTro.Models.DichVu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("giaDichVu")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("tenDichVu")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("dichVu");
                });

            modelBuilder.Entity("Service_PhongTro.Models.DichVuSuDung", b =>
                {
                    b.Property<int>("IDDichVu")
                        .HasColumnType("int");

                    b.Property<int>("IDPhong")
                        .HasColumnType("int");

                    b.HasKey("IDDichVu", "IDPhong");

                    b.HasIndex("IDPhong");

                    b.ToTable("dichVuSuDung");
                });

            modelBuilder.Entity("Service_PhongTro.Models.DienNuoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IDPhong")
                        .HasColumnType("int");

                    b.Property<int>("dienTieuThu")
                        .HasColumnType("int");

                    b.Property<decimal>("giaDien")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("giaNuoc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("nuocTieuThu")
                        .HasColumnType("int");

                    b.Property<DateTime>("thoiGianHoaDon")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IDPhong");

                    b.ToTable("dienNuoc");
                });

            modelBuilder.Entity("Service_PhongTro.Models.HoaDon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GhiChu")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("IDThuePhong")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayThanhToan")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TongTienThanhToan")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<int>("TrangThai")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IDThuePhong");

                    b.ToTable("hoaDon");
                });

            modelBuilder.Entity("Service_PhongTro.Models.LoaiPhong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("gia")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("soNguoi")
                        .HasColumnType("int");

                    b.Property<string>("tenLoaiPhong")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("loaiPhong");
                });

            modelBuilder.Entity("Service_PhongTro.Models.NguoiThue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CMND_CCCD")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SDT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("anhDaiDien")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("gioiTinh")
                        .HasColumnType("int");

                    b.Property<string>("hoTen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("matSauCMND")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("matTruocCCCD")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ngaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("queQuan")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("nguoiThue");
                });

            modelBuilder.Entity("Service_PhongTro.Models.Phong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IDDayTro")
                        .HasColumnType("int");

                    b.Property<int>("IDLoaiPhong")
                        .HasColumnType("int");

                    b.Property<int>("SoNguoiDangO")
                        .HasColumnType("int");

                    b.Property<bool?>("conPhong")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("tenPhong")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IDDayTro");

                    b.HasIndex("IDLoaiPhong");

                    b.ToTable("phong");
                });

            modelBuilder.Entity("Service_PhongTro.Models.TaiKhoan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("matKhau")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("taiKhoan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("taiKhoan");
                });

            modelBuilder.Entity("Service_PhongTro.Models.TaiKhoanNguoiDung", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CMND_CCCD")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("matKhau")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("taiKhoanNguoiDung");
                });

            modelBuilder.Entity("Service_PhongTro.Models.ThongBao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("moTa")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ngayDang")
                        .HasColumnType("datetime2");

                    b.Property<string>("tieuDe")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("thongBao");
                });

            modelBuilder.Entity("Service_PhongTro.Models.ThuePhong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IDNguoiThue")
                        .HasColumnType("int");

                    b.Property<int>("IDPhong")
                        .HasColumnType("int");

                    b.Property<DateTime>("ngayThue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ngayTra")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("tienCoc")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IDNguoiThue");

                    b.HasIndex("IDPhong");

                    b.ToTable("thuePhong");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Service_PhongTro.Models.DichVuSuDung", b =>
                {
                    b.HasOne("Service_PhongTro.Models.DichVu", "dichVu")
                        .WithMany("dichVuSuDung")
                        .HasForeignKey("IDDichVu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DichVuSuDung_DichVu");

                    b.HasOne("Service_PhongTro.Models.Phong", "phong")
                        .WithMany("dichVuSuDung")
                        .HasForeignKey("IDPhong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DichVuSuDung_Phong");

                    b.Navigation("dichVu");

                    b.Navigation("phong");
                });

            modelBuilder.Entity("Service_PhongTro.Models.DienNuoc", b =>
                {
                    b.HasOne("Service_PhongTro.Models.Phong", "phong")
                        .WithMany("dienNuoc")
                        .HasForeignKey("IDPhong")
                        .IsRequired()
                        .HasConstraintName("FK_DienNuoc_Phong");

                    b.Navigation("phong");
                });

            modelBuilder.Entity("Service_PhongTro.Models.HoaDon", b =>
                {
                    b.HasOne("Service_PhongTro.Models.ThuePhong", "ThuePhong")
                        .WithMany("hoaDon")
                        .HasForeignKey("IDThuePhong")
                        .IsRequired()
                        .HasConstraintName("FK_HoaDon_ThuePhong");

                    b.Navigation("ThuePhong");
                });

            modelBuilder.Entity("Service_PhongTro.Models.Phong", b =>
                {
                    b.HasOne("Service_PhongTro.Models.DayTro", "dayTro")
                        .WithMany("phong")
                        .HasForeignKey("IDDayTro")
                        .IsRequired()
                        .HasConstraintName("FK_Phong_DayTro");

                    b.HasOne("Service_PhongTro.Models.LoaiPhong", "loaiPhong")
                        .WithMany("phong")
                        .HasForeignKey("IDLoaiPhong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Phong_LoaiPhong");

                    b.Navigation("dayTro");

                    b.Navigation("loaiPhong");
                });

            modelBuilder.Entity("Service_PhongTro.Models.ThuePhong", b =>
                {
                    b.HasOne("Service_PhongTro.Models.NguoiThue", "nguoiThue")
                        .WithMany("thuePhong")
                        .HasForeignKey("IDNguoiThue")
                        .IsRequired()
                        .HasConstraintName("FK_ThuePhong_NguoiThue");

                    b.HasOne("Service_PhongTro.Models.Phong", "phong")
                        .WithMany("thuePhong")
                        .HasForeignKey("IDPhong")
                        .IsRequired()
                        .HasConstraintName("FK_ThuePhong_Phong");

                    b.Navigation("nguoiThue");

                    b.Navigation("phong");
                });

            modelBuilder.Entity("Service_PhongTro.Models.DayTro", b =>
                {
                    b.Navigation("phong");
                });

            modelBuilder.Entity("Service_PhongTro.Models.DichVu", b =>
                {
                    b.Navigation("dichVuSuDung");
                });

            modelBuilder.Entity("Service_PhongTro.Models.LoaiPhong", b =>
                {
                    b.Navigation("phong");
                });

            modelBuilder.Entity("Service_PhongTro.Models.NguoiThue", b =>
                {
                    b.Navigation("thuePhong");
                });

            modelBuilder.Entity("Service_PhongTro.Models.Phong", b =>
                {
                    b.Navigation("dichVuSuDung");

                    b.Navigation("dienNuoc");

                    b.Navigation("thuePhong");
                });

            modelBuilder.Entity("Service_PhongTro.Models.ThuePhong", b =>
                {
                    b.Navigation("hoaDon");
                });
#pragma warning restore 612, 618
        }
    }
}
